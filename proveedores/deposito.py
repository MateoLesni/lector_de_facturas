import pandas as pd
from io import StringIO
from connect_gemini import estructurar_con_prompt_especifico
import csv


def limpiar_numero(valor):
    try:
        val = str(valor).strip()
        if not val or pd.isna(val):
            return 0.0

        # Si es n√∫mero argentino con separador de miles: "18.974,70"
        if "," in val and "." in val:
            val = val.replace(".", "").replace(",", ".")
        elif "," in val:
            val = val.replace(",", ".")  # decimal simple
        # Si solo tiene punto (en lugar de coma), lo dejamos as√≠

        return float(val)
    except:
        return 0.0

# Lo mismo para cantidad:
def limpiar_cantidad(valor):
    return limpiar_numero(valor)




    # Reemplazar "," por "." y remover espacios
    val = val.replace(",", ".").replace(" ", "")

    # Si hay m√°s de un ".", dejar solo el √∫ltimo como separador decimal
    if val.count(".") > 1:
        partes = val.split(".")
        val = "".join(partes[:-1]) + "." + partes[-1]

    try:
        return float(val)
    except:
        return 0.0


def procesar(texto_ocr):
    # üîß Preprocesamiento: unir l√≠neas cortadas en la tabla
    lineas = texto_ocr.split("\n")
    lineas_procesadas = []
    for i in range(len(lineas)):
        if i > 0 and not lineas[i].startswith("|") and lineas[i-1].startswith("|"):
            lineas_procesadas[-1] += " " + lineas[i].strip()
        else:
            lineas_procesadas.append(lineas[i])
    texto_ocr = "\n".join(lineas_procesadas)

    # üß† Prompt
    prompt = f"""
Tu rol es actuar como un operador de Data Entry para una empresa gastron√≥mica. Vas a estructurar facturas como una tabla con las siguientes columnas:
Las columnas deben estar en el siguiente orden exacto:
"C√≥digo","Producto","Cantidad","Precio OCR","Total","Local","Proveedor"

Est√° totalmente prohibido inventar informaci√≥n. Si no encuentras algo, como √∫ltima opci√≥n pon "0". La informaci√≥n est√° toda en el texto del OCR.
Prohibido agregar texto, car√°cteres o letras antes o desp√∫es del csv. (Ejemplo prohibido: ```csv)
‚ùó No incluyas la columna Precio. Esa ser√° calculada luego.
‚ö† No modifiques la informaci√≥n del OCR.
** C√≥digo: Es la primer columna, es decir la columna del OCR "Codigo"
** Producto: Corresponde a descripcion de cada producto, columna "DESCRIPCION" del OCR.
** Cantidad: Corresponde a los valores de la tercer columna, es decir columna del OCR "Cantidad", la cual nos brinda informaci√≥n de cuantos kgs o unidades compramos. 
** Precio OCR: Corresponde a la columna "Precio Neto Unitario" del OCR.
** Total: Corresponde a la columna "Total Neto" del OCR. 
üßæ El proveedor ser√° "Dep√≥sito Central".

Los n√∫meros proporcionados son formato "132,00" o "132,000" que corresponden a ciento treinta y dos. Otro ej: "5.142,00" y "5.142,000" que ambos corresponden a cinco mil ciento cuarenta y dos. No uses separador de miles, solo usa "," para separador de decimales.


No podes inventar informaci√≥n. Es decir, si no encuentras la informaci√≥n; mira repetidas veces el texto del OCR. Si dados estos intentos no encuentras la informaci√≥n, como √∫ltima opci√≥n, pon 0 en el campo y listo. 

**Formato CSV v√°lido:**
Tenes prohibido agregar texto, informaci√≥n o lo que fuera antes o despu√©s del csv. Solo quiero la tabla con informaci√≥n, lista para integrar en posteriores procesos.
- Todos los campos entre comillas dobles (").
- Separados por coma.
- Una l√≠nea por producto.
- Repet√≠ la fecha si aparece solo una vez.
- No uses separadores de miles.
- Sin encabezado.

Texto OCR:
\"\"\"{texto_ocr}\"\"\"
"""
    resultado_csv = estructurar_con_prompt_especifico(prompt)

    if not resultado_csv or resultado_csv.strip() == "":
        print("‚ö†Ô∏è Gemini no devolvi√≥ datos √∫tiles.")
        return None
    
    try:
        # üîé Validaci√≥n previa de estructura con csv.reader
        filas_validas = []
        for linea in resultado_csv.strip().splitlines():
            reader = csv.reader([linea], delimiter=',', quotechar='"')
            for partes in reader:
                if len(partes) == 7:
                    filas_validas.append([p.strip() for p in partes])
                else:
                    print(f"‚ö†Ô∏è Fila descartada por estructura inv√°lida: {linea}")

        if not filas_validas:
            print("‚ùå No hay filas v√°lidas en el CSV generado.")
            return None

        df = pd.DataFrame(filas_validas, columns=["Fecha", "Producto", "Cantidad", "Precio OCR", "Total", "Local", "Proveedor"])

        # üßº Limpieza segura de n√∫meros
        def limpiar_numero(valor):
            try:
                val = str(valor).strip()
                if not val or pd.isna(val):
                    return 0.0

                # Si tiene coma, es formato europeo: separador decimal es la coma
                if "," in val:
                    # Elimina todos los puntos (separadores de miles)
                    val = val.replace(".", "")
                    # Reemplaza la coma decimal por punto
                    val = val.replace(",", ".")
                else:
                    # Si no tiene coma pero tiene m√∫ltiples puntos, es tipo 18.974.700
                    # ‚Üí mantener solo el √∫ltimo punto como decimal
                    if val.count(".") > 1:
                        partes = val.split(".")
                        val = "".join(partes[:-1]) + "." + partes[-1]
                    # Sino, dejar el punto como est√° (formato ingl√©s)

                return float(val)
            except:
                return 0.0

        df["Cantidad"] = df["Cantidad"].apply(limpiar_numero)
        df["Total"] = df["Total"].apply(limpiar_numero)
        df["Precio OCR"] = df["Precio OCR"].apply(limpiar_numero)

        df = df.dropna(subset=["Cantidad", "Total"])

        # üí∞ C√°lculos y controles
        df["Precio"] = (df["Total"] / df["Cantidad"]).round(2)
        df["Precio Check"] = df["Precio OCR"].round(2)
        df["Total Check"] = (df["Precio Check"] * df["Cantidad"]).round(2)
        df["Dif Precio"] = (df["Precio Check"] - df["Precio"]).round(2)
        df["Dif Total"] = (df["Total Check"] - df["Total"]).round(2)
        df["Q Check"] = (df["Total"] / df["Precio"]).round(2)
        df["Dif Q"] = (df["Q Check"] - df["Cantidad"]).round(2)

        def generar_alerta(row):
            if abs(row["Dif Precio"]) > 2:
                return "Diferencia de Precio"
            elif abs(row["Dif Total"]) > 2:
                return "Diferencia de Total"
            elif abs(row["Dif Q"]) > 0:
                return "Diferencia de Q"
            else:
                return "OK"

        df["Alerta"] = df.apply(generar_alerta, axis=1)

        columnas_finales = [
            "Fecha", "Producto", "Cantidad", "Precio", "Total", "Local", "Proveedor", "Alerta",
            "Precio Check", "Total Check", "Q Check"
        ]
        return df[columnas_finales]

    except Exception as e:
        print(f"‚ùå Error al procesar CSV en {__file__}: {e}")
        return None
    

def prompt_imgia(download_url):
    return f'''
Est√°s en rol de un Data Entry profesional. Vas a procesar la siguiente imagen de una factura gastron√≥mica.

üîó Enlace a la imagen: {download_url}


Tu rol es actuar como un operador de Data Entry profesional para una empresa gastron√≥mica. Vas a extraer y estructurar facturas como una tabla con las siguientes columnas:
Las columnas deben estar en el siguiente orden exacto:
"C√≥digo Gem","Producto Gem","Cantidad Gem","Precio Gem,"Total Gem"

Est√° totalmente prohibido inventar informaci√≥n. Si no encuentras algo, como √∫ltima opci√≥n pon "0". La informaci√≥n est√° toda en el texto del OCR.
Prohibido agregar texto, car√°cteres o letras antes o desp√∫es del csv. (Ejemplo prohibido: ```csv)
‚ö† No modifiques la informaci√≥n del OCR.
** C√≥digo Gem: Es la primer columna, es decir la columna del OCR "Codigo"
** Producto Gem: Corresponde a descripcion de cada producto, columna "DESCRIPCION" del OCR.
** Cantidad Gem: Corresponde a los valores de la tercer columna, es decir columna del OCR "Cantidad", la cual nos brinda informaci√≥n de cuantos kgs o unidades compramos. 
** Precio Gem: Corresponde a la columna "Precio Neto Unitario" de la imagen.
** Total Gem: Corresponde a la columna "Total Neto" de la imagen.
üßæ El proveedor ser√° "Dep√≥sito Central".

Los n√∫meros proporcionados son formato "132,00" ciento treinta y dos o "5.142,00" cinco mil ciento cuarenta y dos. No uses separador de miles, solo usa "," para separador de decimales.

No podes inventar informaci√≥n. Es decir, si no encuentras la informaci√≥n; mira repetidas veces el texto del OCR. Si dados estos intentos no encuentras la informaci√≥n, como √∫ltima opci√≥n, pon 0 en el campo y listo. 

**Formato CSV v√°lido:**
Obligatoriamente el CSV tiene que contener las 5 columnas extra√≠das.
No puede haber ni m√°s ni menos columnas. Teniendo en cuenta las anteriores reglas, puedes crear el csv con las columnas.
Tenes prohibido agregar texto, informaci√≥n o lo que fuera antes o despu√©s del csv. Solo quiero la tabla con informaci√≥n, lista para integrar en posteriores procesos.
Esos son los campos que tenes que rellenar en base a las reglas anteriormente dadas.
Todos los valores tienen que estar encerrados entre comillas dobles. Es decir: "valor" "21,00", etc. Si no lo haces, rompes el c√≥digo posterior.
- Todos los campos entre comillas dobles (").
- Separados por coma.
- Una l√≠nea por producto.
- No uses separadores de miles.
- Sin encabezado.


Imagen: {download_url}
''' 