import pandas as pd
from io import StringIO
from connect_gemini import estructurar_con_prompt_especifico
import csv

def corregir_columna_codigo(df):
    """
    Detecta si la columna de c√≥digos no est√° en la posici√≥n 0.
    Si es as√≠, la mueve al inicio y desplaza la columna que estaba all√≠ a su lugar original.
    """
    if df.shape[1] != 5:
        print(f"‚ùå Error: se esperaban 5 columnas, se recibieron {df.shape[1]}")
        return df

    def es_codigo(celda):
        val = str(celda).strip().replace('"', '').replace(" ", "")
        return val.isdigit() and not any(c in val for c in [",", "."])

    # Buscar qu√© columna contiene mayor cantidad de c√≥digos v√°lidos
    puntajes = []
    for i in range(5):
        puntaje = df.iloc[:, i].apply(es_codigo).sum()
        puntajes.append(puntaje)

    indice_codigo = puntajes.index(max(puntajes))

    if indice_codigo == 0:
        # Ya est√° bien ubicada
        return df

    # Intercambiar columna de c√≥digos con la que est√° en la posici√≥n 0
    columnas = list(df.columns)
    columnas[indice_codigo], columnas[0] = columnas[0], columnas[indice_codigo]
    df = df[columnas]

    print(f"üîÅ Columna de c√≥digos detectada en posici√≥n {indice_codigo}, movida al inicio.")
    return df



def limpiar_cantidad(valor):
    try:
        val = str(valor).strip().lower()
        if val in ["", "nan", "none", "oferta"]:
            return 0.0
        val = val.replace('"', "").replace(" ", "").replace(".", "").replace(",", ".")
        return float(val)
    except:
        return 0.0


def limpiar_numero(valor):
    try:
        val = str(valor).strip().lower()
        if val in ["", "nan", "none", "oferta"]:
            return 0.0
        val = val.replace('"', "").replace(" ", "").replace(".", "").replace(",", ".")
        return float(val)
    except:
        return 0.0



def procesar(texto_ocr):
    # üîß Preprocesamiento: unir l√≠neas cortadas en la tabla
    lineas = texto_ocr.split("\n")
    lineas_procesadas = []
    for i in range(len(lineas)):
        if i > 0 and not lineas[i].startswith("|") and lineas[i-1].startswith("|"):
            lineas_procesadas[-1] += " " + lineas[i].strip()
        else:
            lineas_procesadas.append(lineas[i])
    texto_ocr = "\n".join(lineas_procesadas)

    # üß† Prompt
    prompt = f"""
Tu rol es actuar como un operador de Data Entry para una empresa gastron√≥mica. Vas a estructurar facturas como una tabla con las siguientes columnas:
Las columnas deben estar en el siguiente orden exacto:
"C√≥digo","Producto","Cantidad","Precio OCR","Total","Local","Proveedor"

Est√° totalmente prohibido inventar informaci√≥n. Si no encuentras algo, como √∫ltima opci√≥n pon "0". La informaci√≥n est√° toda en el texto del OCR.
Prohibido agregar texto, car√°cteres o letras antes o desp√∫es del csv. (Ejemplo prohibido: ```csv)
‚ùó No incluyas la columna Precio. Esa ser√° calculada luego.
‚ö† No modifiques la informaci√≥n del OCR.
** C√≥digo: Es la tercer columna, que se referencia como "COD" en el OCR. El contenido, osea los ID o C√≥digos puede variar un poco pero generalmente siguen un formato como: 14933, 31205, 30481, 30648. 
** Producto: Corresponde a descripcion de cada producto, columna "DESCRIPCION" del OCR.
** Cantidad: Corresponde a los valores de la primer columna, es decir columna del OCR "BULTOS", la cual nos brinda informaci√≥n de cuantos kgs o unidades compramos. Ten en cuenta en este campo que, el proveedor indica de estas maneras: "1.0" para decir correctamente una unidad (1). No uses separador de miles, solo "," comas para separador de decimales.
** Ejemplo de valores en Cantidad que se presentar√°n en las facturas: "40.0", Correcta transformacion: "40,0". Ej: "1.0", Correcta transofrmaci√≥n: "1,0".
** Precio OCR: Corresponde a la columna "PRECIO UNI" del OCR. Ten en cuenta que, el proveedor puede indicarnos de manera: "81704.32" para informarnos de, (manera que corresponde) 81704,32. Es importante que incluyas las comas "," en los decimales. No incluyas separador de miles.
** Total: Corresponde a la columna "SUBTOTAL" del OCR. Ten en cuenta que, al igual que en PRECIO OCR, el proveedor puede indicarnos de manera: "81704,32" para informarnos de, (manera que corresponde) 81704,32. Es importante que incluyas las comas "," en los decimales. No incluyas separador de miles.
üßæ El proveedor ser√° "Quilmes".

No podes inventar informaci√≥n. Es decir, si no encuentras la informaci√≥n; mira repetidas veces el texto del OCR. Si dados estos intentos no encuentras la informaci√≥n, como √∫ltima opci√≥n, pon 0 en el campo y listo. 

**Formato CSV v√°lido:**
En caso que un campo sea error, pon "0". Debe estar entre doble comillas tambi√©n al igual que todos los valores.
Tenes prohibido agregar texto, informaci√≥n o lo que fuera antes o despu√©s del csv. Solo quiero la tabla con informaci√≥n, lista para integrar en posteriores procesos.
- Todos los campos entre comillas dobles (").
- Separados por coma.
- Una l√≠nea por producto.
- Repet√≠ la fecha si aparece solo una vez.
- No uses separadores de miles.
- Sin encabezado.

Texto OCR:
\"\"\"{texto_ocr}\"\"\"
"""
    resultado_csv = estructurar_con_prompt_especifico(prompt)

    if not resultado_csv or resultado_csv.strip() == "":
        print("‚ö†Ô∏è Gemini no devolvi√≥ datos √∫tiles.")
        return None
    
    try:
        # üîé Validaci√≥n previa de estructura con csv.reader
        filas_validas = []
        for linea in resultado_csv.strip().splitlines():
            reader = csv.reader([linea], delimiter=',', quotechar='"')
            for partes in reader:
                if len(partes) == 7:
                    filas_validas.append([p.strip() for p in partes])
                else:
                    print(f"‚ö†Ô∏è Fila descartada por estructura inv√°lida: {linea}")

        if not filas_validas:
            print("‚ùå No hay filas v√°lidas en el CSV generado.")
            return None

        df = pd.DataFrame(filas_validas, columns=["Fecha", "Producto", "Cantidad", "Precio OCR", "Total", "Local", "Proveedor"])

        # üßº Limpieza segura de n√∫meros
        def limpiar_numero(valor):
            try:
                return float(str(valor).replace(".", "").replace(",", "."))
            except:
                return None

        df["Cantidad"] = df["Cantidad"].apply(limpiar_numero)
        df["Total"] = df["Total"].apply(limpiar_numero)
        df["Precio OCR"] = df["Precio OCR"].apply(limpiar_numero)

        df = df.dropna(subset=["Cantidad", "Total"])

        # üí∞ C√°lculos y controles
        df["Precio"] = (df["Total"] / df["Cantidad"]).round(2)
        df["Precio Check"] = df["Precio OCR"].round(2)
        df["Total Check"] = (df["Precio Check"] * df["Cantidad"]).round(2)
        df["Dif Precio"] = (df["Precio Check"] - df["Precio"]).round(2)
        df["Dif Total"] = (df["Total Check"] - df["Total"]).round(2)
        df["Q Check"] = (df["Total"] / df["Precio"]).round(2)
        df["Dif Q"] = (df["Q Check"] - df["Cantidad"]).round(2)

        def generar_alerta(row):
            if abs(row["Dif Precio"]) > 2:
                return "Diferencia de Precio"
            elif abs(row["Dif Total"]) > 2:
                return "Diferencia de Total"
            elif abs(row["Dif Q"]) > 0:
                return "Diferencia de Q"
            else:
                return "OK"

        df["Alerta"] = df.apply(generar_alerta, axis=1)

        columnas_finales = [
            "Fecha", "Producto", "Cantidad", "Precio", "Total", "Local", "Proveedor", "Alerta",
            "Precio Check", "Total Check", "Q Check"
        ]
        return df[columnas_finales]

    except Exception as e:
        print(f"‚ùå Error al procesar CSV en {__file__}: {e}")
        return None
    

def prompt_imgia(download_url):
    return f'''
Est√°s en rol de un Data Entry profesional. Vas a procesar la siguiente imagen de una factura gastron√≥mica.

üîó Enlace a la imagen: {download_url}
Las columnas deben estar en el siguiente orden exacto:
"C√≥digo Gem","Producto Gem","Cantidad Gem","Precio Gem,"Total Gem"

Siempre tienen que ser 5 columnas. Los valores est√°n en la imagen, busca bien.
Respeta el Orden. Siempre comienza por el c√≥digo.

‚ö† No modifiques la informaci√≥n de la imagen.
(Las referencias de n√∫mero de columna son dadas contando desde la primera de la izquierda, osea BULTOS ser√≠a la n√∫mero 1.)
Importante: Tenes que tener en claro estas reglas, ya que estas son est√°ticas. No cambia nunca el orden. Respeta a raja tabla cada una de las especificaciones y tendremos la extracci√≥n correcta.
** Reglas:
Siempre ignora los valores de "UNI" es decir las unidades de medida como pack, unidad, etc. No nos interesan.
** C√≥digo Gem: Siempre es un n√∫mero que jam√°s un c√≥digo tendr√≠a un punto com oseparador de miles. Si tiene un separador de miles, o decimales, no es el c√≥digo.
Es la (columna 3) que se referencia como "COD". El contenido, osea los ID o C√≥digos puede variar un poco pero generalmente siguen un formato como: 14933, 31205, 99900, 31074. 
El c√≥digo siempre est√° antes de la descripci√≥n. Es decir, cuando termina el n√∫mero, comienza la descripci√≥n del art√≠culo.
La manera de reconocer el c√≥digo puede ser el saber que el c√≥digo no tiene separador de miles en la factura. Es decir, es siempre "20301" por ej.
** Producto Gem: Corresponde a (la columna 4) "DESCRIPCION" de la factura, que indica detalle de cada producto.
** Cantidad Gem: Corresponde a los valores de la primer columna (Columna 1), es decir columna del OCR "BULTOS", la cual nos brinda informaci√≥n de cuantos kgs o unidades compramos. Ten en cuenta en este campo que, el proveedor indica de estas maneras: "1.0" para decir correctamente una unidad (1). No uses separador de miles, solo "," comas para separador de decimales.
** Precio Gem: Corresponde a la (columna 5) "PRECIO UNI" de la imagen, es el campo posterior a la descripci√≥n. Ten en cuenta que, el proveedor puede indicarnos de manera: "81704.32" para informarnos de, (manera que corresponde) 81704,32. Es importante que incluyas las comas "," en los decimales. No incluyas separador de miles.
** Ejemplo de valores en Cantidad que se presentar√°n en las facturas: "40.0", Correcta transformacion: "40,0". Ej: "1.0", Correcta transofrmaci√≥n: "1,0".
** Total Gem: Corresponde a la columna (En imagen"SUBTOTAL") del OCR (columna 8). Ten en cuenta que, el proveedor puede indicarnos de manera: "81704,32" para informarnos de, (manera que corresponde) 81704,32. Es importante que incluyas las comas "," en los decimales. No incluyas separador de miles.
** Necesitamos el SubTotal ya que es el subtotal sin impuestos y es lo que nos interesa. No traigas otro campo.
** Hay posibilidad de que el "Total" (En imagen SubTotal) diga 0.00. Si es el caso, trae el 0,00
**Formato CSV v√°lido:**
Prohibido agregar letras, texto, palabras antes o despu√©s del CSV. Solo necesito la tabla limpia con la informaci√≥n.
 Importante: No pongas ```csv ni ningun car√°cter fuera del CSV.
 Es importante que no pongas ```csv ni ``` ya que esto rompe el formato. Respeta. Solo CSV limpio.
- Todos los campos entre comillas dobles (").
- Separados por coma.
- Una l√≠nea por producto.
- Repet√≠ la fecha si aparece solo una vez.
- No uses separadores de miles.
- Sin encabezado.

Imagen: {download_url}
'''